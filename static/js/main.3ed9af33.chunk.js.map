{"version":3,"sources":["components/App.jsx","actions/index.js","constants.js","serviceWorker.js","reducers/index.js","index.js"],"names":["App","props","state","text","dueDate","this","addReminder","id","deleteReminder","reminders","className","map","reminder","key","moment","Date","fromNow","onClick","placeholder","onChange","event","setState","target","value","type","renderReminders","clearReminders","Component","connect","action","console","log","Boolean","window","location","hostname","match","Math","random","removeById","filter","read_cookie","bake_cookie","store","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ed9af33.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addReminder, deleteReminder, clearReminders } from \"../actions\";\r\nimport moment from 'moment';\r\nclass App extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            text: '',\r\n            dueDate: ''\r\n        }\r\n    }\r\n    addReminder(){\r\n        this.props.addReminder(this.state.text,this.state.dueDate);\r\n    }\r\n    deleteReminder(id){\r\n        this.props.deleteReminder(id);\r\n    }\r\n    renderReminders(){\r\n        const { reminders } = this.props;\r\n        return (\r\n            <ul className=\"list-group col-sm-4\">\r\n                {\r\n                    reminders.map(reminder=>{\r\n                        return (\r\n                            <li key={reminder.id} className=\"list-group-item\">\r\n                                <div className=\"list-item\">\r\n                                    <div>{reminder.text}</div>\r\n                                    <div><em>{moment(new Date(reminder.dueDate)).fromNow()}</em></div>\r\n                                </div>\r\n                                <div className=\"list-item delete-button\"\r\n                                onClick={()=>this.deleteReminder(reminder.id)}\r\n                                >&#x2715;</div>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"App\">\r\n                <div className=\"title\">\r\n                    Reminder Pro\r\n                </div>\r\n                <div className=\"form-inline reminder-form\">\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                            className=\"form-control\"\r\n                            placeholder=\"I have to...\"\r\n                            onChange={event => this.setState({text:event.target.value})}\r\n                        />\r\n                        <input\r\n                            onChange={event => this.setState({dueDate: event.target.value})}\r\n                            type=\"datetime-local\" className=\"form-control\"/>\r\n                        <button className=\"btn btn-success\" type=\"button\"\r\n                                onClick={() => this.addReminder()}>Add Reminder</button>\r\n                    </div>\r\n                </div>\r\n                {this.renderReminders()}\r\n                <div className=\"btn btn-danger\"\r\n                onClick={()=>this.props.clearReminders()}\r\n                >Clear Reminders</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        reminders: state\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{ addReminder, deleteReminder, clearReminders })(App);\r\n","import {ADD_REMINDER, CLEAR_REMINDERS, DELETE_REMINDER} from \"../constants\";\r\nexport const addReminder = (text, dueDate) => {\r\n    const action = {\r\n        type: ADD_REMINDER,\r\n        text,\r\n        dueDate\r\n    };\r\n    console.log('action in add Reminder', action);\r\n    return action;\r\n};\r\n\r\nexport const deleteReminder = (id) =>{\r\n    const action = {\r\n        type: DELETE_REMINDER,\r\n        id\r\n    };\r\n    console.log('deleting in actions', action);\r\n    return action;\r\n};\r\n\r\nexport const clearReminders = () =>{\r\n    return {\r\n        type: CLEAR_REMINDERS\r\n    }\r\n}","export const ADD_REMINDER =  'ADD_REMINDER';\r\nexport const DELETE_REMINDER = 'DELETE_REMINDER';\r\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_REMINDER, CLEAR_REMINDERS, DELETE_REMINDER} from \"../constants\";\r\nimport { bake_cookie, read_cookie } from 'sfcookies';\r\nconst reminder = (action) =>{\r\n    let {text, dueDate} = action;\r\n    return {\r\n        id: Math.random()*100,\r\n        text,\r\n        dueDate\r\n    }\r\n};\r\nconst removeById = (state=[], id) =>{\r\n    const reminders = state.filter(reminder=> reminder.id !== id);\r\n    return reminders;\r\n};\r\nconst reminders = (state = [], action) => {\r\n    let reminders = null;\r\n    state = read_cookie('reminders');\r\n    switch (action.type) {\r\n        case ADD_REMINDER:\r\n            reminders = [...state,reminder(action)];\r\n            bake_cookie('reminders', reminders);\r\n            return reminders;\r\n        case DELETE_REMINDER:\r\n            reminders = removeById(state,action.id);\r\n            bake_cookie('reminders', reminders);\r\n            return reminders;\r\n        case CLEAR_REMINDERS:\r\n            reminders = [];\r\n            bake_cookie('reminders', reminders);\r\n            return reminders;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default reminders;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers'\nimport './index.css';\n\nconst store = createStore(reducer);\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}